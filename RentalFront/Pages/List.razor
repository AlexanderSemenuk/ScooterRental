@page "/List"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using RentalFront.Models
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage

<style>
    body::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('4357616.png');
        background-repeat: no-repeat;
        background-position: center;
        filter: blur(1px);
        opacity: 0.5;
        z-index: -1;
    }

    @@media (max-width: 600px) {
        body::before {
            background-size: 50%;
        }
    }

    @@media (max-width: 800px) {
        body::before {
            background-size: 60%;
        }
    }

    .bold-line th {
        border-bottom: 3px solid black;
    }

    .bold-text {
        font-weight: bold;
        border-bottom: 3px solid black;
    }
</style>

<h3>Доступні Самокати для прокату</h3>
@if (scooters == null)
{
    <p>Завнтаження...</p>
}
else if (!scooters.Any())
{
    <p>Самокати недоступні для прокату.</p>
}
else
{
    <table class="table">
        <thead class="bold-line">
            <tr>
                <th>ID</th>
                <th>Модель</th>
                <th>Статус</th>
                <th>Дії</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var scooter in availableScooters)
            {
                <tr>
                    <td class="bold-text">@scooter.Id.ToString().Substring(0, 4)</td>
                    <td class="bold-text">@scooter.Model</td>
                    <td class="bold-text">@(scooter.Status ? "Доступно" : "Недоступно")</td>
                    <td class="bold-text">
                        <button class="btn btn-success" @onclick="() => OrderScooter(scooter.Id)">Замовити</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Scooter> scooters;
    private List<Scooter> availableScooters;
    private string newScooterModel;
    private List<Guid> sessionId = new List<Guid>();

    protected override async Task OnParametersSetAsync()
    {
        await LoadScooters();
    }

    private async Task LoadScooters()
    {
        try
        {
            scooters = await HttpClient.GetFromJsonAsync<List<Scooter>>("/api/v1/scooter");
            availableScooters = scooters?.Where(s => s.Status).ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching scooters: {ex.Message}");
            scooters = new List<Scooter>();
            availableScooters = new List<Scooter>();
        }
    }

    private async Task OrderScooter(Guid id)
    {
        try
        {
            var clientId = await SessionStorage.GetItemAsync<Guid>("clientId");

            var response = await HttpClient.PostAsJsonAsync($"StartSession?clientId={clientId}&scooterId={id}", new { clientId, scooterId = id });

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<Guid>(); 

                if (responseData != null && responseData != Guid.Empty)
                {

                    var sesId = await SessionStorage.GetItemAsync<List<Guid>>("SessionIds");

                    if (sesId != null)
                    {
                        sesId.Add(responseData); 
                    }
                    else
                    {
                        sesId = new List<Guid> { responseData }; 
                    }

                    await SessionStorage.SetItemAsync("SessionIds", sesId);

                    sessionId = sesId;

                    Console.WriteLine($"Successfully ordered scooter with id {responseData}");
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("Failed to get a valid session ID from the response.");
                }
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error ordering scooter: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error ordering scooter: {ex.Message}");
        }
        finally
        {
            await LoadScooters();
        }
    }
}

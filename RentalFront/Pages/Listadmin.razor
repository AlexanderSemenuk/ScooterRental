@page "/Listadmin"
@using System.Net.Http
@using System.Net.Http.Json
@using RentalFront.Models
@inject HttpClient HttpClient

<h3>Доступні Самокати для прокату</h3>

<style>
    body::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('4357616.png');
        background-repeat: no-repeat;
        background-position: center;
        filter: blur(1px);
        opacity: 0.5;
        z-index: -1;
    }

    @@media (max-width: 600px) {
        body::before {
            background-size: 50%;
        }
    }

    @@media (max-width: 800px) {
        body::before {
            background-size: 60%;
        }
    }

    .bold-line th {
        border-bottom: 3px solid black;
    }

    .bold-text {
        font-weight: bold;
        border-bottom: 3px solid black;
    }
</style>
@if (scooters == null)
{
    <p>Завнтаження...</p>
}
else
{
    <table class="table">
        <thead class="bold-line">
            <tr>
                <th>ID</th>
                <th>Модель</th>
                <th>Статус</th>
                <th>Дії</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var scooter in scooters)
            {
                <tr>
                    <td class="bold-text">@scooter.Id</td>
                    <td class="bold-text">@scooter.Model</td>
                    <td class="bold-text">@(scooter.Status ? "Доступно" : "Недоступно")</td>
                    <td class="bold-text">
                        <button class="btn btn-danger ml-2" @onclick="() => RemoveScooter(scooter.Id)">Видалити</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="input-group mt-3">
        <input type="text" @bind="newScooterModel" placeholder="Введіть модель скутера" class="form-control" />
        <div class="input-group-append">
            <button class="btn btn-primary" @onclick="AddScooter">Додати</button>
        </div>
    </div>
}

@code {
    private List<Scooter> scooters;
    private string newScooterModel;
    private bool orderInProgress = false;

    protected override async Task OnParametersSetAsync()
    {
        await LoadScooters();
    }

    private async Task LoadScooters()
    {
        try
        {
            scooters = await HttpClient.GetFromJsonAsync<List<Scooter>>("/api/v1/scooter");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching scooters: {ex.Message}");
            scooters = new List<Scooter>();
        }
    }

    private async Task RemoveScooter(Guid id)
    {
        try
        {
            await HttpClient.DeleteAsync($"/api/v1/scooter?id={id}");
            await LoadScooters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing scooter: {ex.Message}");
        }
    }

    private async Task AddScooter()
    {
        if (string.IsNullOrWhiteSpace(newScooterModel))
        {
            return;
        }

        try
        {
            await HttpClient.PostAsJsonAsync($"/api/v1/scooter?model={newScooterModel}", newScooterModel);
            await LoadScooters();
            newScooterModel = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding scooter: {ex.Message}");
        }
    }
}

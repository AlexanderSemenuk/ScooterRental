@page "/list"
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient HttpClient

<h3>Доступні транспортні засоби для прокату</h3>
<style>
    body::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('4357616.png');
        background-repeat: no-repeat;
        background-position: center;
        filter: blur(1px);
        opacity: 0.5;
        z-index: -1;
    }
</style>
@if (scooters == null)
{
    <p>Loading...</p>
}
else if (!scooters.Any())
{
    <p>No scooters available for rental.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Model</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var scooter in scooters)
            {
                <tr>
                    <td>@scooter.Id</td>
                    <td>@scooter.Model</td>
                    <td>@(scooter.Status ? "Доступен" : "Недоступен")</td>
                    <td>
                        <button class="btn btn-success" @onclick="() => OrderScooter(scooter.Id)">Заказать</button>
                        <button class="btn btn-danger ml-2" @onclick="() => RemoveScooter(scooter.Id)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="input-group mt-3">
        <input type="text" @bind="newScooterModel" placeholder="Введите модель скутера" class="form-control" />
        <div class="input-group-append">
            <button class="btn btn-primary" @onclick="AddScooter">Добавить</button>
        </div>
    </div>
}

@code {
    private List<Scooter> scooters;
    private string newScooterModel;
    private bool orderInProgress = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadScooters();
    }

    private async Task LoadScooters()
    {
        try
        {
            scooters = await HttpClient.GetFromJsonAsync<List<Scooter>>("api/v1/scooter?available=true");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching scooters: {ex.Message}");
            scooters = new List<Scooter>();
        }
    }

    private async Task RemoveScooter(Guid id)
    {
        try
        {
            await HttpClient.DeleteAsync($"api/v1/scooter/{id}");
            await LoadScooters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing scooter: {ex.Message}");
        }
    }

    private async Task AddScooter()
    {
        if (string.IsNullOrWhiteSpace(newScooterModel))
        {
            return;
        }

        var newScooter = new Scooter
            {
                Model = newScooterModel,
                Status = true,
            };

        try
        {
            await HttpClient.PostAsJsonAsync("api/v1/scooter", newScooter);
            await LoadScooters();
            newScooterModel = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding scooter: {ex.Message}");
        }
    }

    private async Task OrderScooter(Guid id)
    {
        if (orderInProgress)
        {
            return;
        }

        try
        {
            orderInProgress = true;//test
            Console.WriteLine($"Ordering scooter with id {id}...");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error ordering scooter: {ex.Message}");
        }
        finally
        {
            orderInProgress = false;
        }
    }

    public class Scooter
    {
        public Guid Id { get; set; }
        public string Model { get; set; }
        public bool Status { get; set; }
        public List<Guid> SessionIds { get; set; } = new List<Guid>();
    }
}
